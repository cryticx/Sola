#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "hostDeviceCommon.glsl"
#include "rayCommon.glsl"

layout(location = 0)				rayPayloadEXT PrimaryPayload		primaryPayload;

layout(binding = asBind)			uniform accelerationStructureEXT	topLevelAS;
layout(binding = imgBind, rgba16f)	uniform image2D						image;
layout(binding = genBind)			uniform _RayGenUniform				{ RayGenUniform rayGenUniform; };

void main() {
	const vec2 pixelCenter	= vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);
	const vec2 inUV			= pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	const vec2 d			= inUV * 2.f - 1.f;

	const vec4 origin		= rayGenUniform.viewInverse * vec4(0.f, 0.f, 0.f, 1.f);
	const vec4 target		= rayGenUniform.projInverse * vec4(d.x, d.y, 1.f, 1.f);
	const vec3 targetUnit	= normalize(target.xyz);
	const vec4 direction	= rayGenUniform.viewInverse * vec4(targetUnit, 0.f);

	primaryPayload.raySpreadAngle = 2.f * -targetUnit.z * -rayGenUniform.projInverse[1][1] / gl_LaunchSizeEXT.y; // good enough?

	traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xFF, 0, 0, 0, origin.xyz, clipNear, direction.xyz, clipFar, 0);

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(primaryPayload.hitColor / (vec3(1.f) + primaryPayload.hitColor), 0.f)); // store w/ Reinhard tone-mapping
}
