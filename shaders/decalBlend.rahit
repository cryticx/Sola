#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require

#include "hostDeviceCommon.glsl"
#include "rayCommon.glsl"

hitAttributeEXT vec2 attribs;

layout(location = 2)						rayPayloadInEXT	DecalPayload	payload;

layout(push_constant)						uniform _PushConstants			{ PushConstants pushConstants; };

layout(binding = uniHitBind, scalar)		uniform _RayHitUniform			{ RayHitUniform rayHitUniform; };
layout(binding = sampBind)					uniform sampler					texSampler;
layout(binding = texBind)					uniform texture2D				textures[maxTex];

layout(buffer_reference, scalar)			readonly buffer Indices16		{ u16vec3	a[]; };
layout(buffer_reference, scalar)			readonly buffer Indices32		{ u32vec3	a[]; };
layout(buffer_reference, scalar)			readonly buffer Vertices		{ Vertex	a[]; };
layout(buffer_reference, scalar, std430)	readonly buffer Materials		{ Material	a[]; };

void main() {
	const vec3				barycentrics	= vec3(1.f - attribs.x - attribs.y, attribs.x, attribs.y);

	const uint				geometryIndex	= gl_InstanceCustomIndexEXT + gl_GeometryIndexEXT;

	const GeometryOffsets	geometryOffsets	= rayHitUniform.geometryOffsets[geometryIndex];

	Vertices				pVertices		= Vertices	(pushConstants.vertexAddr	+	geometryOffsets.vertex);

	const Material			mat				= Materials	(pushConstants.materialAddr).a[	geometryOffsets.material];

	uvec3					indices;

	if (geometryOffsets.has16BitIndex == 1)
		indices = Indices16(pushConstants.indexAddr + geometryOffsets.index).a[gl_PrimitiveID];
	else
		indices = Indices32(pushConstants.indexAddr + geometryOffsets.index).a[gl_PrimitiveID];

	const Vertex		vertices[3]	= Vertex[3](pVertices.a[indices.x], pVertices.a[indices.y], pVertices.a[indices.z]);

	const vec3			objPos		= vertices[0].pos * barycentrics.x + vertices[1].pos * barycentrics.y + vertices[2].pos * barycentrics.z;
	const vec3			objNorm		= normalize(vertices[0].norm * barycentrics.x + vertices[1].norm * barycentrics.y + vertices[2].norm * barycentrics.z);

	const vec2			texUV		= vertices[0].texUV * barycentrics.x + vertices[1].texUV * barycentrics.y + vertices[2].texUV * barycentrics.z;

	const vec2			dPdxy[2]	= AnisotropicEllipseAxesAkenineMoller(objPos, objNorm, gl_ObjectRayDirectionEXT, payload.rayConeRadius, vertices, texUV);

	const float			alphaTex	= textureGrad(sampler2D(textures[mat.colorTexIdx], texSampler), texUV, dPdxy[0], dPdxy[1]).a;

	const float			alphaFactor	= mat.colorFactor.a * alphaTex;

	if (alphaFactor <= payload.alpha)
		ignoreIntersectionEXT;

	payload.alpha		= alphaFactor;
	payload.texUV		= texUV;
	payload.dPdxy		= dPdxy;
	payload.idxMaterial	= geometryOffsets.material;
}
